{"version":3,"sources":["app.js"],"names":["app","angular","module","controller","$scope","loadData","Channel","RemObjects","SDK","HTTPClientChannel","Message","JSONMessage","Database","DatabaseService","Scales","ScaleService","GetData","result","OpenTickets","JSON","parse","msg","alert","getErrorMessage","Commodities","Farms","Fields","Trucks","UpdateWeight","GetGross","gross","CurrentWeight","e","UpdateTicket","keys","Array","params","param","Parameter","Name","DataType","Value","Ticket","Oid","push","OutDate","OutWeight","toString","Moisture","TestWeight","UpdateRecords","toObject","AddTicket","guid","Truck","Farm","Field","Splits","Direction","Commodity","InWeight","InDate","isUndefined","AppendRecord","_p8","s","p","Math","random","substr","refresh","setTimeout","mode","this","location","reload","Mode","Directions","cancelClick","selectedOpenTicket","newTicketClick","inboundClick","isValid","Splits1","fieldformClick","Completed","Date","toLocaleDateString","Field1","Field2","Field3","Splits2","Splits3","outboundClick","Inbound","Gross","Tare","Net","saveInboundClick","Nap","delay","start","getTime","DateTime","saveOutboundClick","LoadTicket","thanksClick","GetGrossWeight"],"mappings":"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","file":"millerfarms.min.js","sourcesContent":["\r\nvar app = angular.module('FarmApp', []);\r\n\r\n\"use-strict\";\r\napp.controller('DataController', function ($scope) {\r\n    \r\n    //REM Objects Variables\r\n    var Channel;\r\n    var Message;\r\n    var Scales;\r\n    var Settings;\r\n    var Database;\r\n    var gross = 0;\r\n    \r\n    \r\n    //Initialize The Scope Variables\r\n    loadData();\r\n    $scope.Mode = \"home\";\r\n    $scope.Message = \"\";\r\n    $scope.CurrentWeight = 0.00;\r\n    $scope.Directions = ['Inbound','Outbound'];\r\n      \r\n    //Button Click Methods For Pages\r\n    \r\n    $scope.cancelClick = function () {\r\n        $scope.Ticket = [];\r\n        $scope.selectedOpenTicket = [];\r\n        $scope.Mode = \"home\";\r\n    };\r\n    \r\n\r\n    $scope.newTicketClick = function () {\r\n        $scope.Ticket = [];\r\n        $scope.Mode = \"inbound\";\r\n        UpdateWeight();\r\n    };\r\n\r\n    $scope.inboundClick = function (isValid) {\r\n        if(isValid)\r\n        {\r\n\t    $scope.Ticket.Splits1 = 100;\r\n            $scope.Mode = \"fields\";\r\n            UpdateWeight();\r\n        }\r\n    };\r\n    \r\n    $scope.fieldformClick = function (isValid) {\r\n        if(isValid)\r\n        {\r\n            UpdateWeight();\r\n            $scope.Ticket.InWeight = $scope.CurrentWeight;\r\n            $scope.Ticket.Completed = false;\r\n            $scope.Ticket.InDate = new Date().toLocaleDateString();\r\n            \r\n            //Set Base Field and Splits based on Input 1 which is required\r\n            $scope.Ticket.Field = $scope.Ticket.Field1.Name;\r\n            $scope.Ticket.Splits = $scope.Ticket.Splits1;\r\n            \r\n            if(!angular.isUndefined($scope.Ticket.Field2))\r\n            {\r\n                $scope.Ticket.Field = $scope.Ticket.Field + \"|\" + $scope.Ticket.Field2.Name;\r\n            }\r\n            if(!angular.isUndefined($scope.Ticket.Field3))\r\n            {\r\n                $scope.Ticket.Field = $scope.Ticket.Field + \"|\" + $scope.Ticket.Field3.Name;\r\n            }\r\n            \r\n            if(!angular.isUndefined($scope.Ticket.Splits2))\r\n            {\r\n                $scope.Ticket.Splits = $scope.Ticket.Splits + \"|\" + $scope.Ticket.Splits2;\r\n            }\r\n            if(!angular.isUndefined($scope.Ticket.Splits3))\r\n            {\r\n                $scope.Ticket.Splits = $scope.Ticket.Splits + \"|\" + $scope.Ticket.Splits3;\r\n            }\r\n          \r\n            \r\n            $scope.Mode = \"confirminbound\";\r\n        }\r\n    };\r\n\r\n    $scope.outboundClick = function (isValid) {\r\n        UpdateWeight();\r\n        \r\n        if(isValid)\r\n        {\r\n            $scope.Ticket.OutWeight = $scope.CurrentWeight;\r\n            $scope.Ticket.InWeight = $scope.Ticket.Inbound;\r\n\r\n            if ($scope.Ticket.InWeight > $scope.Ticket.OutWeight) {\r\n                $scope.Ticket.Gross = $scope.Ticket.InWeight;\r\n                $scope.Ticket.Tare = $scope.Ticket.OutWeight;\r\n        }\r\n            else {\r\n                $scope.Ticket.Gross = $scope.Ticket.OutWeight;\r\n                $scope.Ticket.Tare = $scope.Ticket.InWeight;\r\n            }\r\n            $scope.Ticket.Net = $scope.Ticket.Gross - $scope.Ticket.Tare;\r\n\r\n            $scope.Mode = \"confirmoutbound\";\r\n            $scope.Ticket.OutDate = new Date().toLocaleDateString();\r\n            $scope.Ticket.Completed = true;\r\n        }\r\n    };\r\n\r\n    $scope.saveInboundClick = function () {\r\n        $scope.Ticket.InWeight = $scope.CurrentWeight;\r\n        AddTicket();\r\n\t$scope.Message = \"Please Proceed To Loading/Unloading\";\r\n        $scope.Mode = \"thanks\";\r\n        refresh();\r\n    };\r\n\r\n    $scope.Nap = function (delay) {\r\n        var start = new Date().getTime();\r\n        while (new DateTime().getTime() < start + delay);\r\n    }\r\n\r\n    $scope.saveOutboundClick = function () {\r\n        UpdateTicket();\r\n        $scope.Message = \"Ticket Saved\";\r\n        $scope.Mode = \"thanks\";\r\n        refresh();\r\n    };\r\n\r\n    $scope.LoadTicket = function () {\r\n        UpdateWeight();\r\n        $scope.Ticket = $scope.selectedOpenTicket;\r\n        $scope.Mode = \"outbound\";\r\n    }\r\n\r\n    $scope.thanksClick = function () {\r\n\r\n    };\r\n    \r\n    $scope.GetGrossWeight = function(){\r\n        Scales.GetGross(\"A\", function(result) {$scope.CurrentWeight = result; }, function(msg) { gross = 0;});\r\n    }\r\n    \r\n    function loadOpenTickets() {\r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Ticket] WHERE [Completed] = 0\",\r\n\t\tfunction(result) \r\n\t\t{\t\r\n            $scope.OpenTickets = JSON.parse(result);\r\n            $scope.mode = \"home\"; \r\n\t\t},\r\n\t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n\t\t)\r\n    }\r\n    \r\n    function RemoveTicketFromList(){\r\n        for (var i =0; i < $scope.OpenTickets.length; i++)\r\n            var OpenTicketTruck = $scope.OpenTickets[i].Truck.toString();\r\n            var CurrentTicketTruck = $scope.Ticket.Truck.toString();\r\n         \r\n            alert(OpenTicketTruck + \"-\" + CurrentTicketTruck);\r\n            if (OpenTicketTruck == CurrentTicketTruck) \r\n            {\r\n                $scope.OpenTickets.splice(i,1);\r\n                alert(\"Gotcha\");\r\n            }\r\n    }\r\n            \r\n    //ideally there would be a service call to handle this. \r\n    function loadData() {\r\n        \r\n        Channel = new RemObjects.SDK.HTTPClientChannel(\"http://scalesoftdevelopment.com:8095/JSON\");\r\n        Message = new RemObjects.SDK.JSONMessage();\r\n        Database = new DatabaseService(Channel, Message);\r\n        Scales = new ScaleService(Channel, Message);\r\n        \r\n       \r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Ticket] WHERE [Completed] = 0\",\r\n    \t\tfunction(result) \r\n    \t\t{\t\r\n                $scope.OpenTickets = JSON.parse(result);\r\n    \t\t},\r\n    \t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n    \t\t)\r\n           \r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Commodity]\",\r\n    \t\tfunction(result) \r\n    \t\t{\t\r\n                $scope.Commodities = JSON.parse(result);\r\n    \t\t},\r\n    \t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n    \t\t);\r\n        \r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Farm]\",\r\n    \t\tfunction(result) \r\n    \t\t{\t\r\n                $scope.Farms = JSON.parse(result);\r\n    \t\t},\r\n    \t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n    \t\t);\r\n\r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Field]\",\r\n    \t\tfunction(result) \r\n    \t\t{\t\r\n                $scope.Fields = JSON.parse(result);\r\n    \t\t},\r\n    \t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n    \t\t);\r\n\r\n        Database.GetData(\"TruckIO.sdf\", \"SELECT * FROM [Truck]\",\r\n    \t\tfunction(result) \r\n    \t\t{\t\r\n                $scope.Trucks = JSON.parse(result);\r\n    \t\t},\r\n    \t\tfunction(msg) { alert(msg.getErrorMessage()); }\r\n    \t\t);    \r\n         \r\n    }\r\n    \r\n    function UpdateWeight()\r\n      {\r\n        try\r\n        {\r\n          var str = \"{0} {1}\";\r\n            Scales.GetGross(\"A\", function(result) { gross = result; }, function(msg) { gross = -1; });\r\n            $scope.CurrentWeight = gross;\r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n    \r\n    function UpdateTicket()\r\n      {\r\n        try\r\n        {\r\n         \r\n        //Initialize The Keys and Paramaters\r\n          var keys = new Array();\r\n          var params = new Array();\r\n        \r\n        //Add GUID Key\r\n          var param = new Parameter();\r\n\r\n          param.Name = \"Oid\";\r\n          param.DataType = \"System.Guid\";\r\n          param.Value = $scope.Ticket.Oid;\r\n            \r\n          keys.push(param);\r\n            \r\n        //Add Outbound Time\r\n          param = new Parameter();\r\n\r\n          param.Name = \"OutboundTimeDate\";\r\n          param.DataType = \"System.DateTime\";\r\n          param.Value = $scope.Ticket.OutDate;\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n        //Toggle Completed Boolean\r\n            \r\n          param.Name = \"Completed\";\r\n          param.DataType = \"System.Boolean\";\r\n          param.Value = \"true\";\r\n        \r\n          params.push(param);\r\n            \r\n        //Add Outbound Weight\r\n            \r\n          param = new Parameter();\r\n\r\n          param.Name = \"Outbound\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.OutWeight.toString();\r\n\r\n          params.push(param);\r\n\r\n        //Add Moisture\r\n            \r\n          param = new Parameter();\r\n\r\n          param.Name = \"Moisture\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.Moisture;\r\n\r\n          params.push(param);\r\n            \r\n        //Add Test Weight\r\n         \r\n          param = new Parameter();\r\n\r\n          param.Name = \"TestWeight\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.TestWeight;\r\n\r\n          params.push(param);\r\n            \r\n        Database.UpdateRecords(\"TruckIO.sdf\", \"Ticket\", params, keys,\r\n              function(result) \r\n              { \r\n                  var response = result.toObject();\r\n              }, \r\n              function(msg) { alert(\"Fail\"); });\r\n            \r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n    \r\n    function AddTicket()\r\n      {\r\n        try\r\n        {\r\n          var params = new Array();\r\n\r\n          var param = new Parameter();\r\n\r\n          param.Name = \"Oid\";\r\n          param.DataType = \"System.Guid\";\r\n          param.Value = guid();\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n\r\n          param.Name = \"Completed\";\r\n          param.DataType = \"System.Boolean\";\r\n          param.Value = \"false\";\r\n        \r\n          params.push(param);\r\n\r\n          param = new Parameter();\r\n\r\n          param.Name = \"Truck\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Truck.Name;\r\n\r\n          params.push(param);\r\n\r\n          param = new Parameter();\r\n\r\n          param.Name = \"Farm\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Farm.Name;\r\n            \r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"Field\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Field;\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"Splits\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Splits;\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"Direction\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Direction;\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"Commodity\";\r\n          param.DataType = \"System.String\";\r\n          param.Value = $scope.Ticket.Commodity.Name;\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"Inbound\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.InWeight.toString();\r\n\r\n          params.push(param);\r\n            \r\n          param = new Parameter();\r\n            \r\n          param.Name = \"InboundTimeDate\";\r\n          param.DataType = \"System.DateTime\";\r\n          param.Value = $scope.Ticket.InDate;\r\n\r\n          params.push(param);\r\n            \r\n        //Add Moisture\r\n            \r\n        if(!angular.isUndefined($scope.Ticket.Moisture))\r\n        {\r\n          param = new Parameter();\r\n\r\n          param.Name = \"Moisture\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.Moisture;\r\n\r\n          params.push(param);\r\n        }\r\n            \r\n        //Add Test Weight\r\n            \r\n        if(!angular.isUndefined($scope.Ticket.TestWeight))\r\n        {\r\n          param = new Parameter();\r\n\r\n          param.Name = \"TestWeight\";\r\n          param.DataType = \"System.Double\";\r\n          param.Value = $scope.Ticket.TestWeight;\r\n\r\n          params.push(param);\r\n        }\r\n         \r\n          Database.AppendRecord(\"TruckIO.sdf\", \"Ticket\", params, \r\n              function(result) \r\n              { \r\n                  var response = result.toObject();\r\n              }, \r\n              function(msg) { alert(\"Fail\"); });\r\n\r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n     \r\n        function guid() {\r\n          function _p8(s) {\r\n              var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\r\n              return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\r\n          }\r\n          return _p8() + _p8(true) + _p8(true) + _p8();\r\n      }\r\n    \r\n    function refresh() {\r\n\r\n        setTimeout(function () {\r\n            $scope.mode = \"home\";\r\n            this.location.reload()\r\n        }, 2000);\r\n}\r\n\r\n\r\n});"],"sourceRoot":"/source/"}