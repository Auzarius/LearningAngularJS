{"version":3,"sources":["app.js"],"names":["app","angular","module","controller","$scope","loadData","Channel","RemObjects","SDK","HTTPClientChannel","Message","JSONMessage","Database","DatabaseService","Scales","ScaleService","Printer","PrintService","GetData","result","OpenTickets","JSON","parse","msg","alert","getErrorMessage","Commodities","Farms","Fields","Trucks","UpdateWeight","CurrentWeight","getRandomWeight","e","UpdateTicket","AppendUpdate","stringify","OUTscaleticket","PrintTicket","INscaleticket","this","Oid","guid","Farm","Ticket","Name","Field","Truck","IsActive","Completed","Splits","toString","Direction","Commodity","StandardMoisture","Inbound","InWeight","InboundTimeDate","InDate","isUndefined","Moisture","TestWeight","OutboundTimeDate","OutDate","Outbound","OutWeight","TicketNumber","AddTicket","ticket","_p8","s","p","Math","random","substr","refresh","setTimeout","mode","location","reload","SetTicketNumber","SQLStatement","Sequences","Sequence","SeqNumber","UpdateSequence","keys","Array","params","param","Parameter","DataType","Value","push","UpdateRecords","PrintBusinessObject","err","Mode","Directions","variance","division","min","max","floor","cancelClick","Object","selectedOpenTicket","newTicketClick","inboundClick","isValid","Splits1","fieldformClick","Date","toUTCString","Field1","Field2","Field3","Splits2","Splits3","outboundClick","Gross","Tare","Net","saveInboundClick","Nap","delay","start","getTime","DateTime","saveOutboundClick","LoadTicket","thanksClick","GetGrossWeight"],"mappings":"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","file":"mf.min.js","sourcesContent":["var app = angular.module('FarmApp', []);\r\n\r\n\"use-strict\";\r\napp.controller('DataController', function ($scope) {\r\n    \r\n    //REM Objects Variables\r\n    var Channel;\r\n    var Message;\r\n    var Scales;\r\n    var Settings;\r\n    var Database;\r\n    var gross = 0;\r\n    \r\n    \r\n    //Initialize The Scope Variables\r\n    loadData();\r\n    $scope.Mode = \"home\";\r\n    $scope.Message = \"\";\r\n    $scope.CurrentWeight = 0.00;\r\n    $scope.Directions = ['Inbound','Outbound'];\r\n    \r\n    var getRandomWeight = function (variance, division) {\r\n      var min = 0;\r\n      var max = variance / division;\r\n      return Math.floor(Math.random() * (max - min + 1) + min) * division;\r\n    };\r\n    //Button Click Methods For Pages\r\n    \r\n    $scope.cancelClick = function () {\r\n        $scope.Ticket = new Object();\r\n        $scope.selectedOpenTicket = new Object();\r\n        $scope.Mode = \"home\";\r\n    };\r\n    \r\n\r\n    $scope.newTicketClick = function () {\r\n        $scope.Ticket = new Object();\r\n        $scope.Mode = \"inbound\";\r\n        UpdateWeight();\r\n    };\r\n\r\n    $scope.inboundClick = function (isValid) {\r\n        if(isValid)\r\n        {\r\n      $scope.Ticket.Splits1 = 100;\r\n            $scope.Mode = \"fields\";\r\n            UpdateWeight();\r\n        }\r\n    };\r\n    \r\n    $scope.fieldformClick = function (isValid) {\r\n        if(isValid)\r\n        {\r\n            UpdateWeight();\r\n            $scope.Ticket.InWeight = $scope.CurrentWeight;\r\n            $scope.Ticket.Completed = false;\r\n            $scope.Ticket.InDate = new Date().toUTCString();\r\n            \r\n            //Set Base Field and Splits based on Input 1 which is required\r\n            $scope.Ticket.Field = $scope.Ticket.Field1.Name;\r\n            $scope.Ticket.Splits = $scope.Ticket.Splits1;\r\n            \r\n            if(!angular.isUndefined($scope.Ticket.Field2))\r\n            {\r\n                $scope.Ticket.Field = $scope.Ticket.Field + \"|\" + $scope.Ticket.Field2.Name;\r\n            }\r\n            if(!angular.isUndefined($scope.Ticket.Field3))\r\n            {\r\n                $scope.Ticket.Field = $scope.Ticket.Field + \"|\" + $scope.Ticket.Field3.Name;\r\n            }\r\n            \r\n            if(!angular.isUndefined($scope.Ticket.Splits2))\r\n            {\r\n                $scope.Ticket.Splits = $scope.Ticket.Splits + \"|\" + $scope.Ticket.Splits2;\r\n            }\r\n            if(!angular.isUndefined($scope.Ticket.Splits3))\r\n            {\r\n                $scope.Ticket.Splits = $scope.Ticket.Splits + \"|\" + $scope.Ticket.Splits3;\r\n            }\r\n          \r\n            \r\n            $scope.Mode = \"confirminbound\";\r\n        }\r\n    };\r\n\r\n    $scope.outboundClick = function (isValid) {\r\n        UpdateWeight();\r\n        \r\n        if(isValid)\r\n        {\r\n            //$scope.Ticket.OutWeight = $scope.CurrentWeight;\r\n            $scope.Ticket.OutWeight = 50000 + getRandomWeight(10000, 20);\r\n            $scope.Ticket.InWeight = $scope.Ticket.Inbound;\r\n\r\n            if ($scope.Ticket.InWeight > $scope.Ticket.OutWeight) {\r\n                $scope.Ticket.Gross = $scope.Ticket.InWeight;\r\n                $scope.Ticket.Tare = $scope.Ticket.OutWeight;\r\n            }\r\n            else {\r\n                $scope.Ticket.Gross = $scope.Ticket.OutWeight;\r\n                $scope.Ticket.Tare = $scope.Ticket.InWeight;\r\n            }\r\n            $scope.Ticket.Net = $scope.Ticket.Gross - $scope.Ticket.Tare;\r\n\r\n            $scope.Mode = \"confirmoutbound\";\r\n            $scope.Ticket.OutDate = new Date().toUTCString();\r\n            $scope.Ticket.Completed = true;\r\n        }\r\n    };\r\n\r\n    $scope.saveInboundClick = function () {\r\n        $scope.Ticket.InWeight = $scope.CurrentWeight;\r\n        AddTicket();\r\n        $scope.Message = \"Please Proceed To Loading/Unloading\";\r\n        $scope.Mode = \"thanks\";\r\n        refresh();\r\n    };\r\n\r\n    $scope.Nap = function (delay) {\r\n        var start = new Date().getTime();\r\n        while (new DateTime().getTime() < start + delay);\r\n    }\r\n\r\n    $scope.saveOutboundClick = function () {\r\n        SetTicketNumber();\r\n        $scope.Message = \"Ticket Saved\";\r\n        $scope.Mode = \"thanks\";\r\n        refresh();\r\n    };\r\n\r\n    $scope.LoadTicket = function () {\r\n        UpdateWeight();\r\n        $scope.Ticket = $scope.selectedOpenTicket;\r\n        $scope.Mode = \"outbound\";\r\n    }\r\n\r\n    $scope.thanksClick = function () {\r\n\r\n    };\r\n    \r\n    $scope.GetGrossWeight = function(){\r\n        //Scales.GetGross(\"A\", function(result) {$scope.CurrentWeight = result; }, function(msg) { gross = 0;});\r\n        $scope.CurrentWeight = 50000 + getRandomWeight(0,250);\r\n    }\r\n    \r\n\r\n\r\n\r\n    function loadOpenTickets() {\r\n        Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Ticket] WHERE [Completed] = 0\",\r\n    function(result) \r\n    { \r\n            $scope.OpenTickets = JSON.parse(result);\r\n            $scope.mode = \"home\"; \r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    )\r\n    }\r\n    \r\n    function RemoveTicketFromList(){\r\n        for (var i =0; i < $scope.OpenTickets.length; i++)\r\n            var OpenTicketTruck = $scope.OpenTickets[i].Truck.toString();\r\n            var CurrentTicketTruck = $scope.Ticket.Truck.toString();\r\n         \r\n            alert(OpenTicketTruck + \"-\" + CurrentTicketTruck);\r\n            if (OpenTicketTruck == CurrentTicketTruck) \r\n            {\r\n                $scope.OpenTickets.splice(i,1);\r\n                alert(\"Gotcha\");\r\n            }\r\n    }\r\n            \r\n    //ideally there would be a service call to handle this. \r\n    function loadData() {\r\n        \r\n        Channel = new RemObjects.SDK.HTTPClientChannel(\"http://scalesoftdevelopment.com:8095/JSON\"); // \"http://192.168.1.8:8095/JSON\"\r\n        Message = new RemObjects.SDK.JSONMessage();\r\n        Database = new DatabaseService(Channel, Message);\r\n        Scales = new ScaleService(Channel, Message);\r\n        Printer = new PrintService(Channel, Message);\r\n  \r\n       \r\n    Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Ticket] WHERE [Completed] = 0\",\r\n    function(result) \r\n    { \r\n            $scope.OpenTickets = JSON.parse(result);\r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    )\r\n       \r\n    Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Commodity]\",\r\n    function(result) \r\n    { \r\n            $scope.Commodities = JSON.parse(result);\r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    );\r\n    \r\n    Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Farm]\",\r\n    function(result) \r\n    { \r\n            $scope.Farms = JSON.parse(result);\r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    );\r\n\r\n    Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Field]\",\r\n    function(result) \r\n    { \r\n            $scope.Fields = JSON.parse(result);\r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    );\r\n\r\n    Database.GetData(\"MillerFarms.sdf\", \"SELECT * FROM [Truck]\",\r\n    function(result) \r\n    { \r\n            $scope.Trucks = JSON.parse(result);\r\n    },\r\n    function(msg) { alert(msg.getErrorMessage()); }\r\n    );    \r\n         \r\n    }\r\n    \r\n    function UpdateWeight(){\r\n        try\r\n        {\r\n          var str = \"{0} {1}\";\r\n            //Scales.GetGross(\"A\", function(result) { gross = result; }, function(msg) { gross = -1; });\r\n            //$scope.CurrentWeight = gross;\r\n            $scope.CurrentWeight = 30000 + getRandomWeight(5000, 20);\r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n    \r\n    function UpdateTicket()\r\n      {\r\n        try\r\n        {            \r\n          Database.AppendUpdate(\"MillerFarms.sdf\",\"DD2050_Farm_MillerFarms.BusinessObjects.Models.Ticket\",JSON.stringify(new OUTscaleticket()),\r\n                               function(){PrintTicket();},\r\n                               function(){});  \r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n    \r\n    function INscaleticket()\r\n    {\r\n       this.Oid = guid();\r\n       this.Farm = $scope.Ticket.Farm.Name;\r\n       this.Field = $scope.Ticket.Field;\r\n       this.Truck = $scope.Ticket.Truck.Name;\r\n       this.IsActive = true;\r\n       this.Completed = false;\r\n       this.Splits = $scope.Ticket.Splits.toString();\r\n       this.Direction = $scope.Ticket.Direction;\r\n       this.Commodity = $scope.Ticket.Commodity.Name;\r\n       this.StandardMoisture = $scope.Ticket.Commodity.StandardMoisture;\r\n       this.Inbound = $scope.Ticket.InWeight.toString();\r\n       this.InboundTimeDate = $scope.Ticket.InDate;\r\n        \r\n        //Add Moisture            \r\n        if(!angular.isUndefined($scope.Ticket.Moisture))\r\n        {\r\n          this.Moisture = $scope.Ticket.Moisture;\r\n        }\r\n        \r\n        //Add Test Weight        \r\n        if(!angular.isUndefined($scope.Ticket.TestWeight))\r\n        {\r\n          this.TestWeight = $scope.Ticket.TestWeight;\r\n        }\r\n        \r\n    }\r\n    \r\n    function OUTscaleticket()\r\n    {\r\n       this.Oid = $scope.Ticket.Oid;\r\n       this.Farm = $scope.Ticket.Farm;\r\n       this.Field = $scope.Ticket.Field;\r\n       this.Truck = $scope.Ticket.Truck;\r\n       this.Splits = $scope.Ticket.Splits.toString();\r\n       this.Direction = $scope.Ticket.Direction;\r\n       this.Commodity = $scope.Ticket.Commodity;\r\n       this.StandardMoisture = $scope.Ticket.StandardMoisture;\r\n       this.Inbound = $scope.Ticket.InWeight.toString();\r\n       this.InboundTimeDate = $scope.Ticket.InboundTimeDate;\r\n       this.IsActive = true;\r\n       this.Completed = true;\r\n       this.OutboundTimeDate = $scope.Ticket.OutDate;\r\n       this.Outbound = $scope.Ticket.OutWeight.toString();\r\n       this.Moisture = $scope.Ticket.Moisture;\r\n       this.TestWeight = $scope.Ticket.TestWeight;\r\n       this.TicketNumber = $scope.Ticket.TicketNumber.toString();\r\n    }\r\n    \r\n    function AddTicket()\r\n      {\r\n        try\r\n        { \r\n            \r\n        var ticket = new INscaleticket();\r\n            \r\n        Database.AppendUpdate(\"MillerFarms.sdf\",\"DD2050_Farm_MillerFarms.BusinessObjects.Models.Ticket\",JSON.stringify(ticket),\r\n                               function(){},\r\n                               function(){});  \r\n        } catch (e) {\r\n          alert(e);\r\n        }  \r\n      }\r\n     \r\n    function guid() \r\n    {\r\n          function _p8(s) {\r\n              var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\r\n              return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\r\n          }\r\n          return _p8() + _p8(true) + _p8(true) + _p8();\r\n    }\r\n    \r\n    function refresh() {\r\n\r\n        setTimeout(function () {\r\n            $scope.mode = \"home\";\r\n            this.location.reload()\r\n        }, 2000);\r\n    }\r\n    \r\n    function SetTicketNumber()\r\n    {\r\n        var SQLStatement = \"\";\r\n        \r\n        if($scope.Ticket.Commodity === \"CORN\" || $scope.Ticket.Commodity === \"WHEAT\" || $scope.Ticket.Commodity === \"SOYBEAN\")\r\n        {\r\n            if($scope.Ticket.Direction === \"Inbound\")\r\n            {\r\n                SQLStatement = \"SELECT * FROM [Sequencer] WHERE [SeqName] = 'InboundCommodity'\";\r\n            }\r\n            else\r\n            {\r\n                SQLStatement = \"SELECT * FROM [Sequencer] WHERE [SeqName] = 'OutboundCommodity'\";\r\n            }\r\n        }\r\n        else\r\n        {\r\n            SQLStatement = \"SELECT * FROM [Sequencer] WHERE [SeqName] = 'Other'\";\r\n        }\r\n        \r\n        Database.GetData(\"MillerFarms.sdf\", SQLStatement,\r\n      function(result) \r\n      {\r\n                $scope.Sequences = JSON.parse(result);\r\n                $scope.Sequence = $scope.Sequences[0];\r\n                var number = $scope.Sequence.SeqNumber;\r\n                $scope.Ticket.TicketNumber = $scope.Sequence.SeqNumber + 1;\r\n                UpdateTicket();\r\n                UpdateSequence();\r\n      },\r\n      function(msg) { alert(\"Failed To Set Ticket Number\"); }\r\n      );                \r\n    }\r\n    \r\n    function UpdateSequence()\r\n    {\r\n        //Initialize The Keys and Paramaters\r\n          var keys = new Array();\r\n          var params = new Array();\r\n        \r\n        //Add GUID Key\r\n          var param = new Parameter();\r\n\r\n          param.Name = \"Oid\";\r\n          param.DataType = \"System.Guid\";\r\n          param.Value = $scope.Sequence.Oid;\r\n                  \r\n          keys.push(param);\r\n            \r\n        //Add Seq Number\r\n          param = new Parameter();\r\n\r\n          param.Name = \"SeqNumber\";\r\n          param.DataType = \"System.Int32\";\r\n          param.Value = $scope.Ticket.TicketNumber.toString();\r\n                  \r\n          params.push(param);\r\n               \r\n        Database.UpdateRecords(\"MillerFarms.sdf\", \"Sequencer\", params, keys,\r\n              function(result) \r\n              { \r\n              }, \r\n              function(msg) {});\r\n\r\n    }\r\n    \r\n    function PrintTicket(){\r\n      try\r\n      {\r\n          var params = new Array();\r\n\r\n        //Add GUID Key\r\n          var param = new Parameter();\r\n\r\n          param.Name = \"Oid\";\r\n          param.DataType = \"System.Guid\";\r\n          param.Value = $scope.Ticket.Oid;\r\n\r\n          params.push(param);\r\n                  \r\n          Printer.PrintBusinessObject(\"MillerFarms.sdf\",\"DD2050_Farm_MillerFarms.BusinessObjects.Models.Ticket\", params, \"\\\\NAND_Flash\\\\Extern\\\\TicketFormats\\\\OutboundFromWeb.txt\",function(result){alert(result);},function(){})\r\n      }\r\n          catch(err)\r\n          {\r\n            alert(err.Message);\r\n          }\r\n    }\r\n    \r\n    \r\n});\r\n"],"sourceRoot":"/source/"}